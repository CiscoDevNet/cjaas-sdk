/*
 * Azure Functions OpenAPI Extension
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloudEvent;
import io.swagger.client.model.CreateProgressiveProfileViewJobResponseModel;
import io.swagger.client.model.HttpErrorResponse;
import io.swagger.client.model.HttpGenericListObjectResponseJourneyAction;
import io.swagger.client.model.HttpGenericListObjectResponseProfileViewTemplate;
import io.swagger.client.model.HttpGenericObjectResponseJourneyAction;
import io.swagger.client.model.HttpReportObjectResponse;
import io.swagger.client.model.HttpSimpleMessageObjectResponse;
import io.swagger.client.model.JourneyAction;
import io.swagger.client.model.ProfileViewBuilderTemplate;
import io.swagger.client.model.ProfileViewQueryResponse;
import io.swagger.client.model.ProfileViewTemplateCreateModel;
import io.swagger.client.model.TapeReaderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JourneyApi {
    private ApiClient apiClient;

    public JourneyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JourneyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createJourneyAction
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createJourneyActionCall(JourneyAction body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/journey/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createJourneyActionValidateBeforeCall(JourneyAction body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createJourneyAction(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createJourneyAction(Async)");
        }
        
        com.squareup.okhttp.Call call = createJourneyActionCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create/Replace Journey Action.
     * Create/Replace Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @return HttpSimpleMessageObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpSimpleMessageObjectResponse createJourneyAction(JourneyAction body, String authorization) throws ApiException {
        ApiResponse<HttpSimpleMessageObjectResponse> resp = createJourneyActionWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Create/Replace Journey Action.
     * Create/Replace Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @return ApiResponse&lt;HttpSimpleMessageObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpSimpleMessageObjectResponse> createJourneyActionWithHttpInfo(JourneyAction body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = createJourneyActionValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create/Replace Journey Action. (asynchronously)
     * Create/Replace Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createJourneyActionAsync(JourneyAction body, String authorization, final ApiCallback<HttpSimpleMessageObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createJourneyActionValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProfileViewTemplate
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProfileViewTemplateCall(ProfileViewTemplateCreateModel body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/journey/views/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProfileViewTemplateValidateBeforeCall(ProfileViewTemplateCreateModel body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProfileViewTemplate(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createProfileViewTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = createProfileViewTemplateCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Profile View Template
     * Create Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @return HttpSimpleMessageObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpSimpleMessageObjectResponse createProfileViewTemplate(ProfileViewTemplateCreateModel body, String authorization) throws ApiException {
        ApiResponse<HttpSimpleMessageObjectResponse> resp = createProfileViewTemplateWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Create Profile View Template
     * Create Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @return ApiResponse&lt;HttpSimpleMessageObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpSimpleMessageObjectResponse> createProfileViewTemplateWithHttpInfo(ProfileViewTemplateCreateModel body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = createProfileViewTemplateValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Profile View Template (asynchronously)
     * Create Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProfileViewTemplateAsync(ProfileViewTemplateCreateModel body, String authorization, final ApiCallback<HttpSimpleMessageObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProfileViewTemplateValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createView
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @param skipCache If set to true, will indicate to not return any existing cached Profile View (default: false) (optional)
     * @param X_CACHE_MAXAGE_HOUR Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (0) (optional)
     * @param X_CACHE_MAXAGE_MIN Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (15) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createViewCall(String authorization, String viewId, String personId, String searchFilter, Boolean skipCache, Integer X_CACHE_MAXAGE_HOUR, Integer X_CACHE_MAXAGE_MIN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/views";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (viewId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ViewId", viewId));
        if (personId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PersonId", personId));
        if (searchFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SearchFilter", searchFilter));
        if (skipCache != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SkipCache", skipCache));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (X_CACHE_MAXAGE_HOUR != null)
        localVarHeaderParams.put("X-CACHE-MAXAGE-HOUR", apiClient.parameterToString(X_CACHE_MAXAGE_HOUR));
        if (X_CACHE_MAXAGE_MIN != null)
        localVarHeaderParams.put("X-CACHE-MAXAGE-MIN", apiClient.parameterToString(X_CACHE_MAXAGE_MIN));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createViewValidateBeforeCall(String authorization, String viewId, String personId, String searchFilter, Boolean skipCache, Integer X_CACHE_MAXAGE_HOUR, Integer X_CACHE_MAXAGE_MIN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createView(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling createView(Async)");
        }
        
        com.squareup.okhttp.Call call = createViewCall(authorization, viewId, personId, searchFilter, skipCache, X_CACHE_MAXAGE_HOUR, X_CACHE_MAXAGE_MIN, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Starts job to generate Progressive Profile View for a person.
     * Starts job to generate Progressive Profile View for a person. The HTTP response is intended to be compatible with the Polling Consumer Pattern.   SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @param skipCache If set to true, will indicate to not return any existing cached Profile View (default: false) (optional)
     * @param X_CACHE_MAXAGE_HOUR Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (0) (optional)
     * @param X_CACHE_MAXAGE_MIN Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (15) (optional)
     * @return CreateProgressiveProfileViewJobResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateProgressiveProfileViewJobResponseModel createView(String authorization, String viewId, String personId, String searchFilter, Boolean skipCache, Integer X_CACHE_MAXAGE_HOUR, Integer X_CACHE_MAXAGE_MIN) throws ApiException {
        ApiResponse<CreateProgressiveProfileViewJobResponseModel> resp = createViewWithHttpInfo(authorization, viewId, personId, searchFilter, skipCache, X_CACHE_MAXAGE_HOUR, X_CACHE_MAXAGE_MIN);
        return resp.getData();
    }

    /**
     * Starts job to generate Progressive Profile View for a person.
     * Starts job to generate Progressive Profile View for a person. The HTTP response is intended to be compatible with the Polling Consumer Pattern.   SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @param skipCache If set to true, will indicate to not return any existing cached Profile View (default: false) (optional)
     * @param X_CACHE_MAXAGE_HOUR Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (0) (optional)
     * @param X_CACHE_MAXAGE_MIN Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (15) (optional)
     * @return ApiResponse&lt;CreateProgressiveProfileViewJobResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateProgressiveProfileViewJobResponseModel> createViewWithHttpInfo(String authorization, String viewId, String personId, String searchFilter, Boolean skipCache, Integer X_CACHE_MAXAGE_HOUR, Integer X_CACHE_MAXAGE_MIN) throws ApiException {
        com.squareup.okhttp.Call call = createViewValidateBeforeCall(authorization, viewId, personId, searchFilter, skipCache, X_CACHE_MAXAGE_HOUR, X_CACHE_MAXAGE_MIN, null, null);
        Type localVarReturnType = new TypeToken<CreateProgressiveProfileViewJobResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Starts job to generate Progressive Profile View for a person. (asynchronously)
     * Starts job to generate Progressive Profile View for a person. The HTTP response is intended to be compatible with the Polling Consumer Pattern.   SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @param skipCache If set to true, will indicate to not return any existing cached Profile View (default: false) (optional)
     * @param X_CACHE_MAXAGE_HOUR Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (0) (optional)
     * @param X_CACHE_MAXAGE_MIN Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (15) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createViewAsync(String authorization, String viewId, String personId, String searchFilter, Boolean skipCache, Integer X_CACHE_MAXAGE_HOUR, Integer X_CACHE_MAXAGE_MIN, final ApiCallback<CreateProgressiveProfileViewJobResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createViewValidateBeforeCall(authorization, viewId, personId, searchFilter, skipCache, X_CACHE_MAXAGE_HOUR, X_CACHE_MAXAGE_MIN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateProgressiveProfileViewJobResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteJourneyAction
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Journey Action. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJourneyActionCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/actions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJourneyActionValidateBeforeCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteJourneyAction(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteJourneyAction(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteJourneyActionCall(authorization, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Soft delete Journey Action.
     * Soft delete Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Journey Action. (required)
     * @return HttpSimpleMessageObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpSimpleMessageObjectResponse deleteJourneyAction(String authorization, String id) throws ApiException {
        ApiResponse<HttpSimpleMessageObjectResponse> resp = deleteJourneyActionWithHttpInfo(authorization, id);
        return resp.getData();
    }

    /**
     * Soft delete Journey Action.
     * Soft delete Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Journey Action. (required)
     * @return ApiResponse&lt;HttpSimpleMessageObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpSimpleMessageObjectResponse> deleteJourneyActionWithHttpInfo(String authorization, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteJourneyActionValidateBeforeCall(authorization, id, null, null);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Soft delete Journey Action. (asynchronously)
     * Soft delete Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Journey Action. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJourneyActionAsync(String authorization, String id, final ApiCallback<HttpSimpleMessageObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJourneyActionValidateBeforeCall(authorization, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProfileViewTemplate
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProfileViewTemplateCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/views/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProfileViewTemplateValidateBeforeCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteProfileViewTemplate(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteProfileViewTemplateCall(authorization, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Profile View Template
     * Delete Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @return HttpSimpleMessageObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpSimpleMessageObjectResponse deleteProfileViewTemplate(String authorization, String id) throws ApiException {
        ApiResponse<HttpSimpleMessageObjectResponse> resp = deleteProfileViewTemplateWithHttpInfo(authorization, id);
        return resp.getData();
    }

    /**
     * Delete Profile View Template
     * Delete Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @return ApiResponse&lt;HttpSimpleMessageObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpSimpleMessageObjectResponse> deleteProfileViewTemplateWithHttpInfo(String authorization, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteProfileViewTemplateValidateBeforeCall(authorization, id, null, null);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Profile View Template (asynchronously)
     * Delete Profile View Template.   SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;w
     * @param authorization SAS Signature. (required)
     * @param id Identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProfileViewTemplateAsync(String authorization, String id, final ApiCallback<HttpSimpleMessageObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProfileViewTemplateValidateBeforeCall(authorization, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJourneyAction
     * @param authorization SAS Signature (required)
     * @param id Identifies a specific Journey Action. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJourneyActionCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/actions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJourneyActionValidateBeforeCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getJourneyAction(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJourneyAction(Async)");
        }
        
        com.squareup.okhttp.Call call = getJourneyActionCall(authorization, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get specific Journey Action.
     * Get specific Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param id Identifies a specific Journey Action. (required)
     * @return HttpGenericObjectResponseJourneyAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpGenericObjectResponseJourneyAction getJourneyAction(String authorization, String id) throws ApiException {
        ApiResponse<HttpGenericObjectResponseJourneyAction> resp = getJourneyActionWithHttpInfo(authorization, id);
        return resp.getData();
    }

    /**
     * Get specific Journey Action.
     * Get specific Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param id Identifies a specific Journey Action. (required)
     * @return ApiResponse&lt;HttpGenericObjectResponseJourneyAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpGenericObjectResponseJourneyAction> getJourneyActionWithHttpInfo(String authorization, String id) throws ApiException {
        com.squareup.okhttp.Call call = getJourneyActionValidateBeforeCall(authorization, id, null, null);
        Type localVarReturnType = new TypeToken<HttpGenericObjectResponseJourneyAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get specific Journey Action. (asynchronously)
     * Get specific Journey Action.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param id Identifies a specific Journey Action. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJourneyActionAsync(String authorization, String id, final ApiCallback<HttpGenericObjectResponseJourneyAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJourneyActionValidateBeforeCall(authorization, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpGenericObjectResponseJourneyAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJourneyActionList
     * @param authorization SAS Signature. (required)
     * @param templateId Identifies a template. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJourneyActionListCall(String authorization, String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (templateId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("templateId", templateId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJourneyActionListValidateBeforeCall(String authorization, String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getJourneyActionList(Async)");
        }
        
        com.squareup.okhttp.Call call = getJourneyActionListCall(authorization, templateId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all Journey Actions.
     * Get all Journey Actions.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param templateId Identifies a template. (optional)
     * @return HttpGenericListObjectResponseJourneyAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpGenericListObjectResponseJourneyAction getJourneyActionList(String authorization, String templateId) throws ApiException {
        ApiResponse<HttpGenericListObjectResponseJourneyAction> resp = getJourneyActionListWithHttpInfo(authorization, templateId);
        return resp.getData();
    }

    /**
     * Get all Journey Actions.
     * Get all Journey Actions.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param templateId Identifies a template. (optional)
     * @return ApiResponse&lt;HttpGenericListObjectResponseJourneyAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpGenericListObjectResponseJourneyAction> getJourneyActionListWithHttpInfo(String authorization, String templateId) throws ApiException {
        com.squareup.okhttp.Call call = getJourneyActionListValidateBeforeCall(authorization, templateId, null, null);
        Type localVarReturnType = new TypeToken<HttpGenericListObjectResponseJourneyAction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Journey Actions. (asynchronously)
     * Get all Journey Actions.   SAS Token Requirements:  - ss&#x3D;action  - sp&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param templateId Identifies a template. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJourneyActionListAsync(String authorization, String templateId, final ApiCallback<HttpGenericListObjectResponseJourneyAction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJourneyActionListValidateBeforeCall(authorization, templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpGenericListObjectResponseJourneyAction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProfileViewTemplates
     * @param authorization SAS Signature. (required)
     * @param id identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfileViewTemplatesCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/views/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfileViewTemplatesValidateBeforeCall(String authorization, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getProfileViewTemplates(Async)");
        }
        
        com.squareup.okhttp.Call call = getProfileViewTemplatesCall(authorization, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Profile View Templates
     * Get all/specific Profile View Templates, available for usage by the CJaaS Org and Organization.  SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param id identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @return HttpGenericListObjectResponseProfileViewTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpGenericListObjectResponseProfileViewTemplate getProfileViewTemplates(String authorization, String id) throws ApiException {
        ApiResponse<HttpGenericListObjectResponseProfileViewTemplate> resp = getProfileViewTemplatesWithHttpInfo(authorization, id);
        return resp.getData();
    }

    /**
     * Get Profile View Templates
     * Get all/specific Profile View Templates, available for usage by the CJaaS Org and Organization.  SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param id identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @return ApiResponse&lt;HttpGenericListObjectResponseProfileViewTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpGenericListObjectResponseProfileViewTemplate> getProfileViewTemplatesWithHttpInfo(String authorization, String id) throws ApiException {
        com.squareup.okhttp.Call call = getProfileViewTemplatesValidateBeforeCall(authorization, id, null, null);
        Type localVarReturnType = new TypeToken<HttpGenericListObjectResponseProfileViewTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Profile View Templates (asynchronously)
     * Get all/specific Profile View Templates, available for usage by the CJaaS Org and Organization.  SAS Token Requirements:  - ss&#x3D;profile  - sp&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param id identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfileViewTemplatesAsync(String authorization, String id, final ApiCallback<HttpGenericListObjectResponseProfileViewTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfileViewTemplatesValidateBeforeCall(authorization, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpGenericListObjectResponseProfileViewTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportByName
     * @param authorization SAS Signature (required)
     * @param reportname Report Name   Options: yearlyusage | monthlyusage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportByNameCall(String authorization, String reportname, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/reports/{reportname}"
            .replaceAll("\\{" + "reportname" + "\\}", apiClient.escapeString(reportname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportByNameValidateBeforeCall(String authorization, String reportname, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReportByName(Async)");
        }
        // verify the required parameter 'reportname' is set
        if (reportname == null) {
            throw new ApiException("Missing the required parameter 'reportname' when calling getReportByName(Async)");
        }
        
        com.squareup.okhttp.Call call = getReportByNameCall(authorization, reportname, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Report by Name
     * Get a certain usage report.   SAS Token Requirements:  - ss&#x3D;account  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param reportname Report Name   Options: yearlyusage | monthlyusage (required)
     * @return HttpReportObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpReportObjectResponse getReportByName(String authorization, String reportname) throws ApiException {
        ApiResponse<HttpReportObjectResponse> resp = getReportByNameWithHttpInfo(authorization, reportname);
        return resp.getData();
    }

    /**
     * Get Report by Name
     * Get a certain usage report.   SAS Token Requirements:  - ss&#x3D;account  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param reportname Report Name   Options: yearlyusage | monthlyusage (required)
     * @return ApiResponse&lt;HttpReportObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpReportObjectResponse> getReportByNameWithHttpInfo(String authorization, String reportname) throws ApiException {
        com.squareup.okhttp.Call call = getReportByNameValidateBeforeCall(authorization, reportname, null, null);
        Type localVarReturnType = new TypeToken<HttpReportObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Report by Name (asynchronously)
     * Get a certain usage report.   SAS Token Requirements:  - ss&#x3D;account  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param reportname Report Name   Options: yearlyusage | monthlyusage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportByNameAsync(String authorization, String reportname, final ApiCallback<HttpReportObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportByNameValidateBeforeCall(authorization, reportname, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpReportObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getViewStatus
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param instanceId Identifies the instance of the job. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViewStatusCall(String authorization, String viewId, String instanceId, String personId, String searchFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/views";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (viewId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ViewId", viewId));
        if (personId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PersonId", personId));
        if (searchFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SearchFilter", searchFilter));
        if (instanceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instanceId", instanceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getViewStatusValidateBeforeCall(String authorization, String viewId, String instanceId, String personId, String searchFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getViewStatus(Async)");
        }
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getViewStatus(Async)");
        }
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getViewStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getViewStatusCall(authorization, viewId, instanceId, personId, searchFilter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of a Progressive Profile View Job.
     * Get the status of a Progressive Profile View Job.  SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param instanceId Identifies the instance of the job. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getViewStatus(String authorization, String viewId, String instanceId, String personId, String searchFilter) throws ApiException {
        getViewStatusWithHttpInfo(authorization, viewId, instanceId, personId, searchFilter);
    }

    /**
     * Get the status of a Progressive Profile View Job.
     * Get the status of a Progressive Profile View Job.  SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param instanceId Identifies the instance of the job. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getViewStatusWithHttpInfo(String authorization, String viewId, String instanceId, String personId, String searchFilter) throws ApiException {
        com.squareup.okhttp.Call call = getViewStatusValidateBeforeCall(authorization, viewId, instanceId, personId, searchFilter, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the status of a Progressive Profile View Job. (asynchronously)
     * Get the status of a Progressive Profile View Job.  SAS Token Requirements:  - ss&#x3D;profile  - p&#x3D;r
     * @param authorization SAS Signature. (required)
     * @param viewId identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
     * @param instanceId Identifies the instance of the job. (required)
     * @param personId identifies the Person, for which the Profile View needs to be created. (optional)
     * @param searchFilter OData Filter expressions that will be used to search tapes. Example: type eq &#x27;Add To Cart&#x27; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViewStatusAsync(String authorization, String viewId, String instanceId, String personId, String searchFilter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViewStatusValidateBeforeCall(authorization, viewId, instanceId, personId, searchFilter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postEvents
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postEventsCall(CloudEvent body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/events/v1/journey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/cloudevents+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postEventsValidateBeforeCall(CloudEvent body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postEvents(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postEvents(Async)");
        }
        
        com.squareup.okhttp.Call call = postEventsCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Post Events
     * API accepts events that describe what occurred, when, and by whom on every interaction across touch points and applications. Data Ingestion is based on Cloud Events specification for describing event data in a common way. API accepts data in the form of POST with support for Header based authorization.  SAS Token Requirements:  - ss&#x3D;ds  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @return HttpSimpleMessageObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpSimpleMessageObjectResponse postEvents(CloudEvent body, String authorization) throws ApiException {
        ApiResponse<HttpSimpleMessageObjectResponse> resp = postEventsWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * Post Events
     * API accepts events that describe what occurred, when, and by whom on every interaction across touch points and applications. Data Ingestion is based on Cloud Events specification for describing event data in a common way. API accepts data in the form of POST with support for Header based authorization.  SAS Token Requirements:  - ss&#x3D;ds  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @return ApiResponse&lt;HttpSimpleMessageObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpSimpleMessageObjectResponse> postEventsWithHttpInfo(CloudEvent body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = postEventsValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post Events (asynchronously)
     * API accepts events that describe what occurred, when, and by whom on every interaction across touch points and applications. Data Ingestion is based on Cloud Events specification for describing event data in a common way. API accepts data in the form of POST with support for Header based authorization.  SAS Token Requirements:  - ss&#x3D;ds  - sp&#x3D;w
     * @param body  (required)
     * @param authorization SAS Signature (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postEventsAsync(CloudEvent body, String authorization, final ApiCallback<HttpSimpleMessageObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postEventsValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpSimpleMessageObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profileBuilder
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @param personId Identifies the person for whom the profile view is requested. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profileBuilderCall(ProfileViewBuilderTemplate body, String authorization, String personId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/journey/profileview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (personId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PersonId", personId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profileBuilderValidateBeforeCall(ProfileViewBuilderTemplate body, String authorization, String personId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling profileBuilder(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling profileBuilder(Async)");
        }
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling profileBuilder(Async)");
        }
        
        com.squareup.okhttp.Call call = profileBuilderCall(body, authorization, personId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * A Profile is a bespoke view of a customer&#x27;s journey.
     * The profile view is created based on a view template that is provided as input.    **Sample request**: *GET /v1/journey/profileview?customer&#x3D;123XX*    {    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Name\&quot;: \&quot;Test Template 2\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DatapointCount\&quot;: 7,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Attributes\&quot;: [{    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Version\&quot;: \&quot;0.1\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Event\&quot;: \&quot;Add to Cart\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Metadata\&quot;: \&quot;sku\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Limit\&quot;: 3,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DisplayName\&quot;: \&quot;Items added\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Verbose\&quot;: false,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;AggregationMode\&quot;: \&quot;Value\&quot;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}]    }.
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @param personId Identifies the person for whom the profile view is requested. (required)
     * @return ProfileViewQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileViewQueryResponse profileBuilder(ProfileViewBuilderTemplate body, String authorization, String personId) throws ApiException {
        ApiResponse<ProfileViewQueryResponse> resp = profileBuilderWithHttpInfo(body, authorization, personId);
        return resp.getData();
    }

    /**
     * A Profile is a bespoke view of a customer&#x27;s journey.
     * The profile view is created based on a view template that is provided as input.    **Sample request**: *GET /v1/journey/profileview?customer&#x3D;123XX*    {    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Name\&quot;: \&quot;Test Template 2\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DatapointCount\&quot;: 7,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Attributes\&quot;: [{    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Version\&quot;: \&quot;0.1\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Event\&quot;: \&quot;Add to Cart\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Metadata\&quot;: \&quot;sku\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Limit\&quot;: 3,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DisplayName\&quot;: \&quot;Items added\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Verbose\&quot;: false,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;AggregationMode\&quot;: \&quot;Value\&quot;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}]    }.
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @param personId Identifies the person for whom the profile view is requested. (required)
     * @return ApiResponse&lt;ProfileViewQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileViewQueryResponse> profileBuilderWithHttpInfo(ProfileViewBuilderTemplate body, String authorization, String personId) throws ApiException {
        com.squareup.okhttp.Call call = profileBuilderValidateBeforeCall(body, authorization, personId, null, null);
        Type localVarReturnType = new TypeToken<ProfileViewQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A Profile is a bespoke view of a customer&#x27;s journey. (asynchronously)
     * The profile view is created based on a view template that is provided as input.    **Sample request**: *GET /v1/journey/profileview?customer&#x3D;123XX*    {    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Name\&quot;: \&quot;Test Template 2\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DatapointCount\&quot;: 7,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Attributes\&quot;: [{    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Version\&quot;: \&quot;0.1\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Event\&quot;: \&quot;Add to Cart\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Metadata\&quot;: \&quot;sku\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Limit\&quot;: 3,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;DisplayName\&quot;: \&quot;Items added\&quot;,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;Verbose\&quot;: false,    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\&quot;AggregationMode\&quot;: \&quot;Value\&quot;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}]    }.
     * @param body  (required)
     * @param authorization SAS Signature. (required)
     * @param personId Identifies the person for whom the profile view is requested. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profileBuilderAsync(ProfileViewBuilderTemplate body, String authorization, String personId, final ApiCallback<ProfileViewQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profileBuilderValidateBeforeCall(body, authorization, personId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileViewQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readEvents
     * @param authorization SAS Signature (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readEventsCall(String authorization, String $filter, Integer $top, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/v1/journey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$filter", $filter));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readEventsValidateBeforeCall(String authorization, String $filter, Integer $top, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling readEvents(Async)");
        }
        
        com.squareup.okhttp.Call call = readEventsCall(authorization, $filter, $top, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read Events
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels, across mediums. Tape is an append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @return TapeReaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeReaderResponse readEvents(String authorization, String $filter, Integer $top) throws ApiException {
        ApiResponse<TapeReaderResponse> resp = readEventsWithHttpInfo(authorization, $filter, $top);
        return resp.getData();
    }

    /**
     * Read Events
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels, across mediums. Tape is an append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @return ApiResponse&lt;TapeReaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeReaderResponse> readEventsWithHttpInfo(String authorization, String $filter, Integer $top) throws ApiException {
        com.squareup.okhttp.Call call = readEventsValidateBeforeCall(authorization, $filter, $top, null, null);
        Type localVarReturnType = new TypeToken<TapeReaderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Events (asynchronously)
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels, across mediums. Tape is an append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readEventsAsync(String authorization, String $filter, Integer $top, final ApiCallback<TapeReaderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readEventsValidateBeforeCall(authorization, $filter, $top, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeReaderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readEventsByIdentity
     * @param authorization SAS Signature (required)
     * @param identity Unique Identity to filter by (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readEventsByIdentityCall(String authorization, String identity, String $filter, Integer $top, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/events/v1/journey/{identity}"
            .replaceAll("\\{" + "identity" + "\\}", apiClient.escapeString(identity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$filter", $filter));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readEventsByIdentityValidateBeforeCall(String authorization, String identity, String $filter, Integer $top, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling readEventsByIdentity(Async)");
        }
        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling readEventsByIdentity(Async)");
        }
        
        com.squareup.okhttp.Call call = readEventsByIdentityCall(authorization, identity, $filter, $top, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read Events By Identity
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels - across mediums. Tape is a append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param identity Unique Identity to filter by (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @return TapeReaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TapeReaderResponse readEventsByIdentity(String authorization, String identity, String $filter, Integer $top) throws ApiException {
        ApiResponse<TapeReaderResponse> resp = readEventsByIdentityWithHttpInfo(authorization, identity, $filter, $top);
        return resp.getData();
    }

    /**
     * Read Events By Identity
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels - across mediums. Tape is a append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param identity Unique Identity to filter by (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @return ApiResponse&lt;TapeReaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TapeReaderResponse> readEventsByIdentityWithHttpInfo(String authorization, String identity, String $filter, Integer $top) throws ApiException {
        com.squareup.okhttp.Call call = readEventsByIdentityValidateBeforeCall(authorization, identity, $filter, $top, null, null);
        Type localVarReturnType = new TypeToken<TapeReaderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Events By Identity (asynchronously)
     * The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels - across mediums. Tape is a append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss&#x3D;tape  - sp&#x3D;r
     * @param authorization SAS Signature (required)
     * @param identity Unique Identity to filter by (required)
     * @param $filter oData Filter Expressions to Slice/Dice Search, ex: type eq &#x27;Add To Cart&#x27; (optional)
     * @param $top Limit to return latest x events (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readEventsByIdentityAsync(String authorization, String identity, String $filter, Integer $top, final ApiCallback<TapeReaderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readEventsByIdentityValidateBeforeCall(authorization, identity, $filter, $top, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TapeReaderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readStreams
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readStreamsCall(String sig, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/streams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sig != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sig", sig));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readStreamsValidateBeforeCall(String sig, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = readStreamsCall(sig, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read Streams
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String readStreams(String sig, String authorization) throws ApiException {
        ApiResponse<String> resp = readStreamsWithHttpInfo(sig, authorization);
        return resp.getData();
    }

    /**
     * Read Streams
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> readStreamsWithHttpInfo(String sig, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = readStreamsValidateBeforeCall(sig, authorization, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Streams (asynchronously)
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readStreamsAsync(String sig, String authorization, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readStreamsValidateBeforeCall(sig, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readStreamsByPerson
     * @param person Unique Person ID to filter by (required)
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readStreamsByPersonCall(String person, String sig, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/journey/streams/{person}"
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sig != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sig", sig));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readStreamsByPersonValidateBeforeCall(String person, String sig, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling readStreamsByPerson(Async)");
        }
        
        com.squareup.okhttp.Call call = readStreamsByPersonCall(person, sig, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read Streams by Person
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     * @param person Unique Person ID to filter by (required)
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String readStreamsByPerson(String person, String sig, String authorization) throws ApiException {
        ApiResponse<String> resp = readStreamsByPersonWithHttpInfo(person, sig, authorization);
        return resp.getData();
    }

    /**
     * Read Streams by Person
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     * @param person Unique Person ID to filter by (required)
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> readStreamsByPersonWithHttpInfo(String person, String sig, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = readStreamsByPersonValidateBeforeCall(person, sig, authorization, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Streams by Person (asynchronously)
     * Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq &#x27;Add to Cart&#x27;).  SAS Token Requirements:  - ss&#x3D;stream  - sp&#x3D;r
     * @param person Unique Person ID to filter by (required)
     * @param sig Optional SAS Signature within QueryString (optional)
     * @param authorization Optional SAS Signature within Header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readStreamsByPersonAsync(String person, String sig, String authorization, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readStreamsByPersonValidateBeforeCall(person, sig, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
