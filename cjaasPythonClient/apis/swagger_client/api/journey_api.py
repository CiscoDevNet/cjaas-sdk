# coding: utf-8

"""
    Azure Functions OpenAPI Extension

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JourneyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_journey_action(self, body, authorization, **kwargs):  # noqa: E501
        """Create/Replace Journey Action.  # noqa: E501

        Create/Replace Journey Action.   SAS Token Requirements:  - ss=action  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_journey_action(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JourneyAction body: (required)
        :param str authorization: SAS Signature (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_journey_action_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_journey_action_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def create_journey_action_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Create/Replace Journey Action.  # noqa: E501

        Create/Replace Journey Action.   SAS Token Requirements:  - ss=action  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_journey_action_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JourneyAction body: (required)
        :param str authorization: SAS Signature (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_journey_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_journey_action`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_journey_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpSimpleMessageObjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_profile_view_template(self, body, authorization, **kwargs):  # noqa: E501
        """Create Profile View Template  # noqa: E501

        Create Profile View Template.   SAS Token Requirements:  - ss=profile  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_profile_view_template(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileViewTemplateCreateModel body: (required)
        :param str authorization: SAS Signature. (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_profile_view_template_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_profile_view_template_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def create_profile_view_template_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Create Profile View Template  # noqa: E501

        Create Profile View Template.   SAS Token Requirements:  - ss=profile  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_profile_view_template_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileViewTemplateCreateModel body: (required)
        :param str authorization: SAS Signature. (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_profile_view_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_profile_view_template`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_profile_view_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/views/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpSimpleMessageObjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_view(self, authorization, view_id, **kwargs):  # noqa: E501
        """Starts job to generate Progressive Profile View for a person.  # noqa: E501

        Starts job to generate Progressive Profile View for a person. The HTTP response is intended to be compatible with the Polling Consumer Pattern.   SAS Token Requirements:  - ss=profile  - p=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_view(authorization, view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str view_id: identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
        :param str person_id: identifies the Person, for which the Profile View needs to be created.
        :param str search_filter: OData Filter expressions that will be used to search tapes. Example: type eq 'Add To Cart'
        :param bool skip_cache: If set to true, will indicate to not return any existing cached Profile View (default: false)
        :param int x_cache_maxage_hour: Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (0)
        :param int x_cache_maxage_min: Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (15)
        :return: CreateProgressiveProfileViewJobResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_view_with_http_info(authorization, view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_view_with_http_info(authorization, view_id, **kwargs)  # noqa: E501
            return data

    def create_view_with_http_info(self, authorization, view_id, **kwargs):  # noqa: E501
        """Starts job to generate Progressive Profile View for a person.  # noqa: E501

        Starts job to generate Progressive Profile View for a person. The HTTP response is intended to be compatible with the Polling Consumer Pattern.   SAS Token Requirements:  - ss=profile  - p=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_view_with_http_info(authorization, view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str view_id: identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
        :param str person_id: identifies the Person, for which the Profile View needs to be created.
        :param str search_filter: OData Filter expressions that will be used to search tapes. Example: type eq 'Add To Cart'
        :param bool skip_cache: If set to true, will indicate to not return any existing cached Profile View (default: false)
        :param int x_cache_maxage_hour: Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (0)
        :param int x_cache_maxage_min: Controls the maximum age (in hours) of an existing cached view, that the API can return for this request. Default (15)
        :return: CreateProgressiveProfileViewJobResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'view_id', 'person_id', 'search_filter', 'skip_cache', 'x_cache_maxage_hour', 'x_cache_maxage_min']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_view" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_view`")  # noqa: E501
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `create_view`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'view_id' in params:
            query_params.append(('ViewId', params['view_id']))  # noqa: E501
        if 'person_id' in params:
            query_params.append(('PersonId', params['person_id']))  # noqa: E501
        if 'search_filter' in params:
            query_params.append(('SearchFilter', params['search_filter']))  # noqa: E501
        if 'skip_cache' in params:
            query_params.append(('SkipCache', params['skip_cache']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_cache_maxage_hour' in params:
            header_params['X-CACHE-MAXAGE-HOUR'] = params['x_cache_maxage_hour']  # noqa: E501
        if 'x_cache_maxage_min' in params:
            header_params['X-CACHE-MAXAGE-MIN'] = params['x_cache_maxage_min']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/views', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateProgressiveProfileViewJobResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_journey_action(self, authorization, id, **kwargs):  # noqa: E501
        """Soft delete Journey Action.  # noqa: E501

        Soft delete Journey Action.   SAS Token Requirements:  - ss=action  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_journey_action(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str id: Identifies a specific Journey Action. (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_journey_action_with_http_info(authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_journey_action_with_http_info(authorization, id, **kwargs)  # noqa: E501
            return data

    def delete_journey_action_with_http_info(self, authorization, id, **kwargs):  # noqa: E501
        """Soft delete Journey Action.  # noqa: E501

        Soft delete Journey Action.   SAS Token Requirements:  - ss=action  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_journey_action_with_http_info(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str id: Identifies a specific Journey Action. (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_journey_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_journey_action`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_journey_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/actions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpSimpleMessageObjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_profile_view_template(self, authorization, **kwargs):  # noqa: E501
        """Delete Profile View Template  # noqa: E501

        Delete Profile View Template.   SAS Token Requirements:  - ss=profile  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profile_view_template(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str id: Identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization.
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_profile_view_template_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_profile_view_template_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def delete_profile_view_template_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Delete Profile View Template  # noqa: E501

        Delete Profile View Template.   SAS Token Requirements:  - ss=profile  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_profile_view_template_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str id: Identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization.
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profile_view_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_profile_view_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('Id', params['id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/views/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpSimpleMessageObjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_journey_action(self, authorization, id, **kwargs):  # noqa: E501
        """Get specific Journey Action.  # noqa: E501

        Get specific Journey Action.   SAS Token Requirements:  - ss=action  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journey_action(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str id: Identifies a specific Journey Action. (required)
        :return: HttpGenericObjectResponseJourneyAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_journey_action_with_http_info(authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_journey_action_with_http_info(authorization, id, **kwargs)  # noqa: E501
            return data

    def get_journey_action_with_http_info(self, authorization, id, **kwargs):  # noqa: E501
        """Get specific Journey Action.  # noqa: E501

        Get specific Journey Action.   SAS Token Requirements:  - ss=action  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journey_action_with_http_info(authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str id: Identifies a specific Journey Action. (required)
        :return: HttpGenericObjectResponseJourneyAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_journey_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_journey_action`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_journey_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/actions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpGenericObjectResponseJourneyAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_journey_action_list(self, authorization, **kwargs):  # noqa: E501
        """Get all Journey Actions.  # noqa: E501

        Get all Journey Actions.   SAS Token Requirements:  - ss=action  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journey_action_list(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str template_id: Identifies a template.
        :return: HttpGenericListObjectResponseJourneyAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_journey_action_list_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_journey_action_list_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def get_journey_action_list_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Get all Journey Actions.  # noqa: E501

        Get all Journey Actions.   SAS Token Requirements:  - ss=action  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_journey_action_list_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str template_id: Identifies a template.
        :return: HttpGenericListObjectResponseJourneyAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_journey_action_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_journey_action_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'template_id' in params:
            query_params.append(('templateId', params['template_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpGenericListObjectResponseJourneyAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_view_templates(self, authorization, **kwargs):  # noqa: E501
        """Get Profile View Templates  # noqa: E501

        Get all/specific Profile View Templates, available for usage by the CJaaS Org and Organization.  SAS Token Requirements:  - ss=profile  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_view_templates(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str id: identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization.
        :return: HttpGenericListObjectResponseProfileViewTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_view_templates_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_view_templates_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def get_profile_view_templates_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Get Profile View Templates  # noqa: E501

        Get all/specific Profile View Templates, available for usage by the CJaaS Org and Organization.  SAS Token Requirements:  - ss=profile  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_view_templates_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str id: identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization.
        :return: HttpGenericListObjectResponseProfileViewTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_view_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_profile_view_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('Id', params['id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/views/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpGenericListObjectResponseProfileViewTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_report_by_name(self, authorization, reportname, **kwargs):  # noqa: E501
        """Get Report by Name  # noqa: E501

        Get a certain usage report.   SAS Token Requirements:  - ss=account  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_by_name(authorization, reportname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str reportname: Report Name   Options: yearlyusage | monthlyusage (required)
        :return: HttpReportObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_report_by_name_with_http_info(authorization, reportname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_report_by_name_with_http_info(authorization, reportname, **kwargs)  # noqa: E501
            return data

    def get_report_by_name_with_http_info(self, authorization, reportname, **kwargs):  # noqa: E501
        """Get Report by Name  # noqa: E501

        Get a certain usage report.   SAS Token Requirements:  - ss=account  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_report_by_name_with_http_info(authorization, reportname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str reportname: Report Name   Options: yearlyusage | monthlyusage (required)
        :return: HttpReportObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'reportname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_report_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_report_by_name`")  # noqa: E501
        # verify the required parameter 'reportname' is set
        if ('reportname' not in params or
                params['reportname'] is None):
            raise ValueError("Missing the required parameter `reportname` when calling `get_report_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reportname' in params:
            path_params['reportname'] = params['reportname']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/reports/{reportname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpReportObjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view_status(self, authorization, view_id, instance_id, **kwargs):  # noqa: E501
        """Get the status of a Progressive Profile View Job.  # noqa: E501

        Get the status of a Progressive Profile View Job.  SAS Token Requirements:  - ss=profile  - p=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_status(authorization, view_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str view_id: identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
        :param str instance_id: Identifies the instance of the job. (required)
        :param str person_id: identifies the Person, for which the Profile View needs to be created.
        :param str search_filter: OData Filter expressions that will be used to search tapes. Example: type eq 'Add To Cart'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_status_with_http_info(authorization, view_id, instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_status_with_http_info(authorization, view_id, instance_id, **kwargs)  # noqa: E501
            return data

    def get_view_status_with_http_info(self, authorization, view_id, instance_id, **kwargs):  # noqa: E501
        """Get the status of a Progressive Profile View Job.  # noqa: E501

        Get the status of a Progressive Profile View Job.  SAS Token Requirements:  - ss=profile  - p=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_status_with_http_info(authorization, view_id, instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature. (required)
        :param str view_id: identifies a specific Profile View Template, available for usage by the CJaaS Org and Organization. (required)
        :param str instance_id: Identifies the instance of the job. (required)
        :param str person_id: identifies the Person, for which the Profile View needs to be created.
        :param str search_filter: OData Filter expressions that will be used to search tapes. Example: type eq 'Add To Cart'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'view_id', 'instance_id', 'person_id', 'search_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_view_status`")  # noqa: E501
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `get_view_status`")  # noqa: E501
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params or
                params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_view_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'view_id' in params:
            query_params.append(('ViewId', params['view_id']))  # noqa: E501
        if 'person_id' in params:
            query_params.append(('PersonId', params['person_id']))  # noqa: E501
        if 'search_filter' in params:
            query_params.append(('SearchFilter', params['search_filter']))  # noqa: E501
        if 'instance_id' in params:
            query_params.append(('instanceId', params['instance_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/views', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_events(self, body, authorization, **kwargs):  # noqa: E501
        """Post Events  # noqa: E501

        API accepts events that describe what occurred, when, and by whom on every interaction across touch points and applications. Data Ingestion is based on Cloud Events specification for describing event data in a common way. API accepts data in the form of POST with support for Header based authorization.  SAS Token Requirements:  - ss=ds  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_events(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudEvent body: (required)
        :param str authorization: SAS Signature (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_events_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.post_events_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def post_events_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Post Events  # noqa: E501

        API accepts events that describe what occurred, when, and by whom on every interaction across touch points and applications. Data Ingestion is based on Cloud Events specification for describing event data in a common way. API accepts data in the form of POST with support for Header based authorization.  SAS Token Requirements:  - ss=ds  - sp=w  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_events_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudEvent body: (required)
        :param str authorization: SAS Signature (required)
        :return: HttpSimpleMessageObjectResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_events`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `post_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/cloudevents+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/journey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HttpSimpleMessageObjectResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profile_builder(self, body, authorization, person_id, **kwargs):  # noqa: E501
        """A Profile is a bespoke view of a customer's journey.  # noqa: E501

        The profile view is created based on a view template that is provided as input.    **Sample request**: *GET /v1/journey/profileview?customer=123XX*    {    &nbsp;&nbsp;&nbsp;&nbsp;\"Name\": \"Test Template 2\",    &nbsp;&nbsp;&nbsp;&nbsp;\"DatapointCount\": 7,    &nbsp;&nbsp;&nbsp;&nbsp;\"Attributes\": [{    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Version\": \"0.1\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Event\": \"Add to Cart\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Metadata\": \"sku\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Limit\": 3,    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"DisplayName\": \"Items added\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Verbose\": false,    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"AggregationMode\": \"Value\"    &nbsp;&nbsp;&nbsp;&nbsp;}]    }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_builder(body, authorization, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileViewBuilderTemplate body: (required)
        :param str authorization: SAS Signature. (required)
        :param str person_id: Identifies the person for whom the profile view is requested. (required)
        :return: ProfileViewQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profile_builder_with_http_info(body, authorization, person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profile_builder_with_http_info(body, authorization, person_id, **kwargs)  # noqa: E501
            return data

    def profile_builder_with_http_info(self, body, authorization, person_id, **kwargs):  # noqa: E501
        """A Profile is a bespoke view of a customer's journey.  # noqa: E501

        The profile view is created based on a view template that is provided as input.    **Sample request**: *GET /v1/journey/profileview?customer=123XX*    {    &nbsp;&nbsp;&nbsp;&nbsp;\"Name\": \"Test Template 2\",    &nbsp;&nbsp;&nbsp;&nbsp;\"DatapointCount\": 7,    &nbsp;&nbsp;&nbsp;&nbsp;\"Attributes\": [{    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Version\": \"0.1\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Event\": \"Add to Cart\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Metadata\": \"sku\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Limit\": 3,    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"DisplayName\": \"Items added\",    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Verbose\": false,    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"AggregationMode\": \"Value\"    &nbsp;&nbsp;&nbsp;&nbsp;}]    }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_builder_with_http_info(body, authorization, person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileViewBuilderTemplate body: (required)
        :param str authorization: SAS Signature. (required)
        :param str person_id: Identifies the person for whom the profile view is requested. (required)
        :return: ProfileViewQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profile_builder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `profile_builder`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `profile_builder`")  # noqa: E501
        # verify the required parameter 'person_id' is set
        if ('person_id' not in params or
                params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `profile_builder`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_id' in params:
            query_params.append(('PersonId', params['person_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/profileview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileViewQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_events(self, authorization, **kwargs):  # noqa: E501
        """Read Events  # noqa: E501

        The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels, across mediums. Tape is an append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss=tape  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_events(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str filter: oData Filter Expressions to Slice/Dice Search, ex: type eq 'Add To Cart'
        :param int top: Limit to return latest x events
        :return: TapeReaderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_events_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.read_events_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def read_events_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Read Events  # noqa: E501

        The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels, across mediums. Tape is an append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss=tape  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_events_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str filter: oData Filter Expressions to Slice/Dice Search, ex: type eq 'Add To Cart'
        :param int top: Limit to return latest x events
        :return: TapeReaderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'filter', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `read_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/journey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapeReaderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_events_by_identity(self, authorization, identity, **kwargs):  # noqa: E501
        """Read Events By Identity  # noqa: E501

        The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels - across mediums. Tape is a append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss=tape  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_events_by_identity(authorization, identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str identity: Unique Identity to filter by (required)
        :param str filter: oData Filter Expressions to Slice/Dice Search, ex: type eq 'Add To Cart'
        :param int top: Limit to return latest x events
        :return: TapeReaderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_events_by_identity_with_http_info(authorization, identity, **kwargs)  # noqa: E501
        else:
            (data) = self.read_events_by_identity_with_http_info(authorization, identity, **kwargs)  # noqa: E501
            return data

    def read_events_by_identity_with_http_info(self, authorization, identity, **kwargs):  # noqa: E501
        """Read Events By Identity  # noqa: E501

        The Tape holds running stream of customer journey events that arrive onto Data Sink from all channels - across mediums. Tape is a append-only, immutable data ledger that can be queried to retrieve snapshot of latest events that moment in time or historically to play-back events as they occurred to understand or analyze Journeys using ML/AI models.  SAS Token Requirements:  - ss=tape  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_events_by_identity_with_http_info(authorization, identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: SAS Signature (required)
        :param str identity: Unique Identity to filter by (required)
        :param str filter: oData Filter Expressions to Slice/Dice Search, ex: type eq 'Add To Cart'
        :param int top: Limit to return latest x events
        :return: TapeReaderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'identity', 'filter', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_events_by_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `read_events_by_identity`")  # noqa: E501
        # verify the required parameter 'identity' is set
        if ('identity' not in params or
                params['identity'] is None):
            raise ValueError("Missing the required parameter `identity` when calling `read_events_by_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identity' in params:
            path_params['identity'] = params['identity']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/journey/{identity}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TapeReaderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_streams(self, **kwargs):  # noqa: E501
        """Read Streams  # noqa: E501

        Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq 'Add to Cart').  SAS Token Requirements:  - ss=stream  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_streams(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sig: Optional SAS Signature within QueryString
        :param str authorization: Optional SAS Signature within Header
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_streams_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_streams_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_streams_with_http_info(self, **kwargs):  # noqa: E501
        """Read Streams  # noqa: E501

        Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq 'Add to Cart').  SAS Token Requirements:  - ss=stream  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_streams_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sig: Optional SAS Signature within QueryString
        :param str authorization: Optional SAS Signature within Header
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sig', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_streams" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sig' in params:
            query_params.append(('sig', params['sig']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/event-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/streams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_streams_by_person(self, person, **kwargs):  # noqa: E501
        """Read Streams by Person  # noqa: E501

        Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq 'Add to Cart').  SAS Token Requirements:  - ss=stream  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_streams_by_person(person, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person: Unique Person ID to filter by (required)
        :param str sig: Optional SAS Signature within QueryString
        :param str authorization: Optional SAS Signature within Header
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_streams_by_person_with_http_info(person, **kwargs)  # noqa: E501
        else:
            (data) = self.read_streams_by_person_with_http_info(person, **kwargs)  # noqa: E501
            return data

    def read_streams_by_person_with_http_info(self, person, **kwargs):  # noqa: E501
        """Read Streams by Person  # noqa: E501

        Real-time streaming enables API consumers to listen for events as it arrives part of the Journey, these may be transformed, value added / enriched and ready to be consumed or forwarded to an another destination. Optionally accepts $filter to slice/dice further (ex: type eq 'Add to Cart').  SAS Token Requirements:  - ss=stream  - sp=r  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_streams_by_person_with_http_info(person, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person: Unique Person ID to filter by (required)
        :param str sig: Optional SAS Signature within QueryString
        :param str authorization: Optional SAS Signature within Header
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person', 'sig', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_streams_by_person" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'person' is set
        if ('person' not in params or
                params['person'] is None):
            raise ValueError("Missing the required parameter `person` when calling `read_streams_by_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person' in params:
            path_params['person'] = params['person']  # noqa: E501

        query_params = []
        if 'sig' in params:
            query_params.append(('sig', params['sig']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/event-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/journey/streams/{person}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
